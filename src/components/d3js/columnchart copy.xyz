import React, { Component } from 'react'
import * as d3 from 'd3';
import data from './data.csv';
class ColumnChart extends Component {
    constructor(props) {
        super(props);
        this.state = {  };
        this.myRef = React.createRef();
    }
    componentDidMount=()=>{
        alert(data);
        let size =  500;
        let margin = 200;
        let width = 400;
        let height = 300;     

        let svg = d3.select(this.myRef.current)
                    .append("svg")
                    .attr("width",width)
                    .attr("height",height);
        svg.append("text")
        .attr("transform", "translate(100,0)")
        .attr("x",50)
        .attr("y",50)
        .attr("font-size","24px")
        .text("MS Foods Ltd.");
        
        var xScale =  d3.scaleBand().range([0,width]).padding(0.4),
        yScale = d3.scaleBand().range([height,0]);

        var g = svg.append("g")
        .attr("transform", "translate(" + 100 + "," + 100 + ")");
        
        d3.csv("./data.csv").then((data)=>{
            alert(`Success ${data}`);
            xScale.domain(data.map((d)=>{return d.year}));
            yScale.domain([0,d3.max(data,(d)=>{return d.value})]);

      g.append("g")
       .attr("transform", "translate(0," + height + ")")
       .call(d3.axisBottom(xScale))
       .append("text")
       .attr("y", height-250)
       .attr("x", width-400)
       .attr("text-anchor", "end")
       .attr("stroke", "black")
       .text("Year");

      g.append("g")
       .call(d3.axisLeft(yScale).tickFormat((d)=>{
           return "$" + d;
       })
       .ticks(10))
       .append("text")
       .attr("transform", "rotate(-90)")
       .attr("y", 6)
       .attr("dy", "-5.1em")
       .attr("text-anchor", "end")
       .attr("stroke", "black")
       .text("Stock Price");

      g.selectAll(".bar")
       .data(data)
       .enter().append("rect")
       .attr("class", "bar")
       .attr("x", (d)=> { return xScale(d.year); })
       .attr("y", (d)=> { return yScale(d.value); })
       .attr("width", xScale.bandwidth())
       .attr("height", (d)=> { return height - yScale(d.value); });
        }).catch((error)=>{
            alert(`Error ${error}`);
        });    
    }
    render() { 
        return (  
            <div ref={this.myRef}>
            </div>
           

        );
    }
}
 
export default ColumnChart;